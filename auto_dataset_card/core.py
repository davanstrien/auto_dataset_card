# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['get_label_column_names', 'yield_label_column', 'get_label_counts', 'generate_label_breakdown_tables']

# %% ../nbs/00_core.ipynb 2
from datasets import load_dataset
from datasets import ClassLabel
from datasets import IterableDataset, Dataset, DatasetDict, IterableDatasetDict
from typing import Dict, Any, List
from collections import Counter
from tabulate import tabulate
from typing import Union

# %% ../nbs/00_core.ipynb 5
def get_label_column_names(features: Dict[str, Any]) -> List[str]:
    return [k for k, v in features.items() if isinstance(v, ClassLabel)]

# %% ../nbs/00_core.ipynb 7
def yield_label_column(
    dataset: IterableDataset, column_name: str, features: Dict[str, Any]
):
    for row in dataset:
        intlabel = row[column_name]
        if intlabel != -1:
            yield features[column_name].int2str(intlabel)
        else:
            yield "no label"

# %% ../nbs/00_core.ipynb 8
def get_label_counts(
    ds: Union[IterableDataset, DatasetDict]
) -> Dict[str, Dict[str, int]]:
    results = {}
    for split_name in ds:
        split = ds[split_name]
        split_features = split.features
        label_columns = get_label_column_names(split_features)
        for column in label_columns:
            labels = yield_label_column(split, column, split_features)
            results[split_name] = dict(Counter(labels))
    return results

# %% ../nbs/00_core.ipynb 10
def generate_label_breakdown_tables(results):
    tables = []
    for name, split in results.items():
        total = sum(split.values())
        table_data = [(k, v, f"{round((v/total)*100,2)}%") for k, v in split.items()]
        tables.append(
            (
                name,
                tabulate(
                    table_data,
                    tablefmt="github",
                    headers=("Label", "Count", "Percentage"),
                ),
            )
        )
    return tables
